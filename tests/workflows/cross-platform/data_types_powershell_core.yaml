name: "Data Types Test - PowerShell Core Unix"
description: "Test all supported data types with PowerShell Core on Unix systems"

parameters:
  test_string:
    type: string
    value: "PowerShell Core Unix"
  test_int:
    type: int
    value: 777
  test_float:
    type: float
    value: 1.41421
  test_bool:
    type: bool
    value: true
  test_datetime:
    type: datetime
    value: "2025-08-20T18:45:30Z"

steps:
  test_cross_platform_features:
    type: script::pwsh
    script: |
      # Test PowerShell Core cross-platform capabilities
      $PSVersionTable | Out-String | Write-Host
      $testString = "{{ inputs.str_value }}"
      Write-Host "Testing cross-platform PowerShell with: $testString"
      
      # Test platform detection
      if ($IsLinux -or $IsMacOS) {
          Write-Host "Running on Unix-like system: $($PSVersionTable.Platform)"
          Write-Host "CROSS_PLATFORM=OK"
      } else {
          Write-Host "CROSS_PLATFORM=NOK - Expected Unix platform"
          exit 1
      }
    inputs:
      str_value:
        ref: parameters.test_string
    outputs:
      result:
        pattern: "CROSS_PLATFORM=(.*)"
        type: string

  test_advanced_data_types:
    type: script::pwsh
    script: |
      # Test advanced PowerShell data type handling
      $intValue = [int]"{{ inputs.int_value }}"
      $floatValue = [double]"{{ inputs.float_value }}"
      $boolValue = [bool]("{{ inputs.bool_value }}" -eq "true")
      $stringValue = "{{ inputs.str_value }}"
      
      Write-Host "Advanced data type testing:"
      Write-Host "Integer: $intValue (Type: $($intValue.GetType().Name))"
      Write-Host "Float: $floatValue (Type: $($floatValue.GetType().Name))"
      Write-Host "Boolean: $boolValue (Type: $($boolValue.GetType().Name))"
      Write-Host "String: $stringValue (Type: $($stringValue.GetType().Name))"
      
      # Validate all types
      if ($intValue -is [int] -and $floatValue -is [double] -and 
          $boolValue -is [bool] -and $stringValue -is [string]) {
          Write-Host "ADVANCED_TYPES=OK"
      } else {
          Write-Host "ADVANCED_TYPES=NOK"
          exit 1
      }
    inputs:
      int_value:
        ref: parameters.test_int
      float_value:
        ref: parameters.test_float
      bool_value:
        ref: parameters.test_bool
      str_value:
        ref: parameters.test_string
    outputs:
      result:
        pattern: "ADVANCED_TYPES=(.*)"
        type: string

  test_collections_and_objects:
    type: script::pwsh
    script: |
      # Test PowerShell collections and custom objects
      $data = @{
          metadata = @{
              name = "{{ inputs.str_value }}"
              count = [int]"{{ inputs.int_value }}"
              ratio = [double]"{{ inputs.float_value }}"
              enabled = [bool]("{{ inputs.bool_value }}" -eq "true")
              timestamp = "{{ inputs.datetime_value }}"
          }
          results = @()
      }
      
      # Add computed results
      for ($i = 1; $i -le 3; $i++) {
          $data.results += @{
              iteration = $i
              computed = [int]"{{ inputs.int_value }}" * $i
              factor = [double]"{{ inputs.float_value }}" / $i
          }
      }
      
      Write-Host "Collections and objects test:"
      $data | ConvertTo-Json -Depth 3 | Write-Host
      
      # Validate structure
      if ($data.results.Count -eq 3 -and 
          $data.metadata.count -eq 777 -and
          $data.results[2].computed -eq 2331) {
          Write-Host "COLLECTIONS=OK"
      } else {
          Write-Host "COLLECTIONS=NOK"
          exit 1
      }
    inputs:
      str_value:
        ref: parameters.test_string
      int_value:
        ref: parameters.test_int
      float_value:
        ref: parameters.test_float
      bool_value:
        ref: parameters.test_bool
      datetime_value:
        ref: parameters.test_datetime
    outputs:
      result:
        pattern: "COLLECTIONS=(.*)"
        type: string

  test_unix_integration:
    type: script::pwsh
    script: |
      # Test PowerShell Core integration with Unix tools
      Write-Host "Testing Unix integration capabilities:"
      
      # Test process execution
      $unameResult = & uname -s 2>$null
      if ($unameResult) {
          Write-Host "Unix system detected: $unameResult"
          Write-Host "UNIX_INTEGRATION=OK"
      } else {
          # Try alternative for macOS or other Unix systems
          $osInfo = & sw_vers -productName 2>$null
          if ($osInfo) {
              Write-Host "macOS system detected: $osInfo"  
              Write-Host "UNIX_INTEGRATION=OK"
          } else {
              Write-Host "Could not detect Unix system"
              Write-Host "UNIX_INTEGRATION=NOK"
              exit 1
          }
      }
    outputs:
      result:
        pattern: "UNIX_INTEGRATION=(.*)"
        type: string

  final_powershell_core_test:
    type: script::pwsh
    script: |
      $results = @{
          "cross_platform" = "{{ inputs.cross_platform }}"
          "advanced_types" = "{{ inputs.advanced_types }}"
          "collections" = "{{ inputs.collections }}"
          "unix_integration" = "{{ inputs.unix_integration }}"
      }
      
      Write-Host "=== POWERSHELL CORE UNIX TEST RESULTS ==="
      $results.GetEnumerator() | ForEach-Object {
          Write-Host "$($_.Key): $($_.Value)"
      }
      
      # Final validation
      if (($results.Values | Where-Object { $_ -ne "OK" }).Count -eq 0) {
          Write-Host "FINAL_RESULT=OK"
      } else {
          Write-Host "FINAL_RESULT=NOK"
          exit 1
      }
    inputs:
      cross_platform:
        ref: steps.test_cross_platform_features.outputs.result
      advanced_types:
        ref: steps.test_advanced_data_types.outputs.result
      collections:
        ref: steps.test_collections_and_objects.outputs.result
      unix_integration:
        ref: steps.test_unix_integration.outputs.result
    outputs:
      final:
        pattern: "FINAL_RESULT=(.*)"
        type: string